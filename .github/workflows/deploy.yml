name: Deploy FullStackApp to AWS

on:
  push:
    branches:
      - feature/actions-pipeline

env:
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
  AWS_REGION: ap-northeast-2

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Docker Hub
        run: echo $DOCKER_HUB_PASSWORD | docker login -u $DOCKER_HUB_USERNAME --password-stdin

      # Frontend 빌드 및 S3 배포
      # - name: Build and deploy Frontend
      #   run: |
      #     cd frontend
      #     npm ci
      #     npm run build
      #     aws s3 sync build/ s3://${{ secrets.S3_BUCKET }} --delete
      #     aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"

      # Backend, AI, Crawling 이미지 빌드 및 푸시
      - name: Build and push Docker images
        run: |
          docker build -t $DOCKER_HUB_USERNAME/backend:latest ./backend
          docker build -t $DOCKER_HUB_USERNAME/ai:latest ./ai
          docker build -t $DOCKER_HUB_USERNAME/crawling:latest ./crawling
          docker push $DOCKER_HUB_USERNAME/backend:latest
          docker push $DOCKER_HUB_USERNAME/ai:latest
          docker push $DOCKER_HUB_USERNAME/crawling:latest

      # Ansible 설치
      - name: Install Ansible
        run: |
          sudo apt update
          sudo apt install -y ansible

      # Ansible 인벤토리 및 설정 파일 생성 (백엔드만을 위한)
      - name: Create Ansible files
        run: |
          cat << EOF > inventory.ini
          [backend]
          backend-server ansible_host=${{ secrets.BACKEND_EC2_HOST }} ansible_user=ec2-user
          [all:vars]
          ansible_ssh_private_key_file=/tmp/ec2_key
          ansible_ssh_common_args='-o StrictHostKeyChecking=no'
          EOF

          echo "${{ secrets.EC2_KEY }}" > /tmp/ec2_key && chmod 600 /tmp/ec2_key

          cat << EOF > ansible.cfg
          [defaults]
          inventory = ./inventory.ini
          remote_user = ec2-user
          private_key_file = /tmp/ec2_key
          host_key_checking = False
          [ssh_connection]
          ssh_args = -o ControlMaster=auto -o ControlPersist=60s -o UserKnownHostsFile=/dev/null
          EOF

      # Ansible 플레이북 생성 (백엔드만을 위한)
      - name: Create Ansible playbook
        run: |
          cat << EOF > deploy-backend.yml
          - hosts: backend
            become: yes
            tasks:
              - name: Pull and run backend services
                docker_container:
                  name: "{{ item.name }}"
                  image: "${{ env.DOCKER_HUB_USERNAME }}/{{ item.name }}:latest"
                  state: started
                  recreate: yes
                  network_mode: backend-network
                  published_ports: "{{ item.port }}:{{ item.port }}"
                loop:
                  - { name: ai, port: 5000 }
                  - { name: backend, port: 8080 }
          EOF

      # Ansible 플레이북 실행 (백엔드 배포)
      - name: Run Ansible playbook for backend
        run: ansible-playbook deploy-backend.yml

      # Crawling 서비스 배포 (SSH를 통한 직접 배포)
      - name: Deploy Crawling service
        env:
          EC2_KEY: ${{ secrets.EC2_KEY }}
        run: |
          echo "$EC2_KEY" > /tmp/ec2_key
          chmod 600 /tmp/ec2_key
          ssh -o StrictHostKeyChecking=no -i /tmp/ec2_key ec2-user@${{ secrets.CRAWLING_EC2_HOST }} '
            docker pull ${{ env.DOCKER_HUB_USERNAME }}/crawling:latest
            docker stop crawling || true
            docker rm crawling || true
            docker run -d --name crawling -p 5001:5001 ${{ env.DOCKER_HUB_USERNAME }}/crawling:latest
          '
          rm /tmp/ec2_key

      - name: Cleanup
        if: always()
        run: |
          docker logout
          rm -f /tmp/ec2_key
